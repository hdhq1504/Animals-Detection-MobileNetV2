# -*- coding: utf-8 -*-
"""Model_CNN_MobinetV2_Animals.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1211chsTEW8fxAmNUG63TF8aR2n8wEqHO
"""

import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
import matplotlib.pyplot as plt
from google.colab import files, drive

# Kết nối Google Drive
print("Kết nối Google Drive...")
drive.mount('/content/drive')

# Cài đặt Kaggle API
print("Tải file kaggle.json...")
files.upload()  # Tải file kaggle.json từ máy tính
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!pip install kaggle

# Tải tập dữ liệu Animals-10 từ Kaggle
print("Tải tập dữ liệu Animals-10...")
!kaggle datasets download -d alessiocorrado99/animals10
!unzip -q animals10.zip -d /content/animals10

# Định nghĩa các tham số
data_dir = '/content/animals10/raw-img'
img_height, img_width = 224, 224
batch_size = 32
epochs = 20

# Tạo ImageDataGenerator cho tiền xử lý và tăng cường dữ liệu
train_datagen = ImageDataGenerator(
    preprocessing_function=preprocess_input,  # Sử dụng preprocess_input của MobileNetV2
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest',
    validation_split=0.2
)

# Tải dữ liệu huấn luyện
train_generator = train_datagen.flow_from_directory(
    data_dir,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='categorical',
    subset='training'
)

# Tải dữ liệu xác thực
validation_generator = train_datagen.flow_from_directory(
    data_dir,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='categorical',
    subset='validation'
)

# Xây dựng mô hình dựa trên MobileNetV2
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(img_height, img_width, 3))

# Đóng băng các tầng của MobileNetV2
base_model.trainable = False

# Thêm các tầng fully connected
inputs = base_model.input
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(512, activation='relu')(x)
x = Dropout(0.5)(x)
outputs = Dense(10, activation='softmax')(x)

# Tạo mô hình
model = Model(inputs=inputs, outputs=outputs)

# Biên dịch mô hình
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Xem tóm tắt mô hình
model.summary()

# Huấn luyện mô hình
print("Bắt đầu huấn luyện mô hình...")
history = model.fit(
    train_generator,
    epochs=epochs,
    validation_data=validation_generator
)

# Lưu mô hình vào Google Drive
model_path = '/content/drive/My Drive/animal_classification_mobilenetv2.h5'
model.save(model_path)
print(f"Mô hình đã được lưu tại: {model_path}")

# Vẽ biểu đồ độ chính xác
plt.figure(figsize=(10, 5))
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.savefig('/content/drive/My Drive/accuracy_plot_mobilenetv2.png')
plt.show()

# Vẽ biểu đồ hàm mất mát
plt.figure(figsize=(10, 5))
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.savefig('/content/drive/My Drive/loss_plot_mobilenetv2.png')
plt.show()

# Hàm dự đoán trên ảnh mới
def predict_image(img_path):
    from tensorflow.keras.preprocessing import image
    img = image.load_img(img_path, target_size=(img_height, img_width))
    img_array = image.img_to_array(img)
    img_array = preprocess_input(img_array)  # Sử dụng preprocess_input của MobileNetV2
    img_array = np.expand_dims(img_array, axis=0)
    predictions = model.predict(img_array)
    class_names = train_generator.class_indices
    predicted_class = list(class_names.keys())[np.argmax(predictions)]
    return predicted_class

# Ví dụ dự đoán (thay bằng đường dẫn ảnh thực tế)
# img_path = '/content/animals10/raw-img/cane/dog_image.jpg'
# print(f"Dự đoán: {predict_image(img_path)}")